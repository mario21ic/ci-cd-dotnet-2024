pipeline {
    agent any

    options {
        //ansiColor('xterm')
        timestamps()
        timeout(time: 1, unit: 'HOURS')
    }
    
    parameters {
        // string(name: 'ARTIFACT', defaultValue: 'artifact.zip', description: 'Recipe to deploy')
        string(name: 'DOCKER_IMAGE', defaultValue: 'mario21ic/dotnet-api:v1', description: 'Docker image to deploy')
        string(name: 'SLACK_CHANNEL', defaultValue: '#deploys', description: '')
    }

    environment {
        ARTIFACT = "artifact.zip"
        SLACK_MESSAGE = "Job '${env.JOB_NAME} - ${params.TYPE}': Build ${env.BUILD_NUMBER}"
    }

    stages {
        stage("Repository") {
            steps {
                checkout scm
            }
        }

        // stage('Copy Artifact') {
        //     steps {
        //         copyArtifacts(
        //             projectName: 'pipeline.integration',
        //             filter: "${params.ARTIFACT}",
        //             target: 'artifacts/',
        //             selector: lastSuccessful()
        //         )
        //     }
        // }

        stage("Artifact") {
            steps {
                sh "./scripts/artifact_cd.sh ${params.DOCKER_IMAGE} ${envs.ARTIFACT}"
                sh "cat stack.yaml"
                sh "cat appspec.yml"
                archiveArtifacts artifacts: "${ARTIFACT}"
            }
        }

        stage("CodeDeploy") {
            steps {
                sh "./scripts/pydeploy.sh"
            }
        }

        stage('Test') {
            steps {
                sh "docker stack ls"
                sh "docker service ls"
                sh "docker service ps mystack_api"

                // sh "curl http://localhost:8081/weatherforecast | jq ."
            }
        }
    
    }

    post {
        always {
            archiveArtifacts artifacts: "${ARTIFACT}", onlyIfSuccessful: true
            echo "Cleaning up"
            deleteDir()
        }
        
        success {
            echo "Success"
            // slackSend channel: "${params.SLACK_CHANNEL}", color: 'good', message: "${SLACK_MESSAGE}"
        }
        
        failure {
            echo "Failure"
            // slackSend channel: "${params.SLACK_CHANNEL}", color: 'danger', message: "${SLACK_MESSAGE}"
        }
    }
}
